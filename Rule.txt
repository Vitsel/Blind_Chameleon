1. main이 있는 파일명은 _Main
2. class 구현 시 파일을 분할하되 관련 있는 것들은 하나의 파일에 구현하며,
   선언부 후에 구현부를 작성하고, 파일명은 class_클래스이름
3. 함수 명과 Class명은 Pascal기법 사용(예 : void PrintData(){})
4. 변수명은 Camel 기법 사용(예 : int appleCount)
5. const 변수는 전부 대문자
6. define용 변수는 분할클래스(partial)를 사용해 Default 클래스에 선언
7. Class 구현 시 접근제어 적절히 활용(private, protected, public)
8. GitHub에 Push할 때는 정상적으로 기능이 수행 될 때만 Commit
9. Commit할 때는 Commit 메시지 작성 방법에 따라 작성
┗◇ 제목 -> 빈줄 -> 내용으로 작성(CLI 환경에서 Shift + Enter로 " " 사이에서 개행)
┗◇ 제목은 변경된 결과
┗◇ 내용은 제목에 적힌 결과를 위해 수정한 내용(너무 자세하지 않아도 됨)
┗◇ 자신이 주로 관리하던 파일이 아닌 다른 파일을 건드렸을 경우 자세히 작성(몇번째 줄 ~로 수정 또는 추가 등)
┗◇ 아래는 권장되는 커밋 메시지 작성법이다
 ┗▶제목과 본문을 빈 행으로 분리한다
 ┗▶제목 행을 50자로 제한한다
 ┗▶제목 행 첫 글자는 대문자로 쓴다
 ┗▶제목 행 끝에 마침표를 넣지 않는다
 ┗▶제목 행에 명령문을 사용한다
 ┗▶본문을 72자 단위로 개행한다
 ┗▶어떻게 보다는 무엇과 왜를 설명한다
10. Commit 충돌이 발생할 경우 관련자와 상의하여 적절히 수정
11. Commit 할 경우 단톡방에 Commit 했음을 알릴 것
12. Github가 아닌 git의 user.name은 Ryu GukHyeon 처럼 이름을 영어로 작성
13. Github가 아닌 git의 user.email은 실제 사용하는 email 작성
14. .gitignore 파일은 자신의 환경에 맞게 수정해서 사용하되, 삭제하지 않고 추가만 한다
15. .gitignore 파일만 수정했을 경우 push하지 않는다